---
title: "Estimating the variables that influence a films sucess in IMDB"
author: "Group 09"
number-sections: true
format: 
  html:
    embed-resources: true
    code-tools: true
  pdf:
    geometry: "left=2cm, right=2cm, top=2cm, bottom=2cm"
editor_options: 
  chunk_output_type: inline
execute:
  echo: true
  eval: true
  warning: false
  message: false
---

```{r}
library(ggplot2)
library(tidyverse)
library(skimr)
library(moderndive)
library(gapminder)
library(sjPlot)
library(stats)
library(jtools)
library(kableExtra)
library(GGally)
library(caret)
library(pROC)
library(janitor)
```

## Introduction

The following analysis aims to understand the relationship between a set of descriptive variables about a film and its success measured by its respective IMDB rating.

The central question around this analysis will be the following: **Which properties of films influence whether they are rated by IMDB as greater than 7 or not?**

From this question it is established that the target variable will be binary and hence a Logistic Regression model seems reasonable for this scenario. It is also established that missing variables ( in case they are found ) will be inputted with a summary statistic like mean or median if the distribution of this subset is similar to that of the complete data set, otherwise they will be deleted if they do not represent a large portion of the data set.

Throughout this analysis a full model will be fitted taking into account all numerical and categorical variables in the data set. Then the best performing model will be selected and it will only include those variables which are found to be significant.

Finally, a short summary of the model and answers to the analysis question will be found in the conclusion section.

## Data Cleaning

The film data set obtained from IMDB contains the following variables:

-   film.id - The unique identifier for the film

-   year - Year of release of the film in cinemas

-   length - Duration (in minutes)

-   budget - Budget for the films production (in \$1000000s)

-   votes - Number of positive votes received by viewers

-   genre - Genre of the film

-   rating - IMDB rating from 0-10

```{r}
#Read data set
film <- read.csv("dataset09.csv") %>% 
  mutate(target = ifelse(rating>7, 1, 0)) %>%  #Define target variable
  mutate(Rating = ifelse(rating>7, ">7", "<=7"))  #Define Rating variable help us get better data visualisation

#Create summary
film %>% 
  skim()
```

It is now established that film_id will not be used as an explanatory variable since it is only an identifier for the film, rather than an informative feature about it. Genre is the only categorical variable contained in the data set. Year, length, budget, and votes are the numerical explanatory variables to be tested in this analysis.

When it comes to the data set, there seems to be an issue with the length variable as there are 127 rows where this information is missing.

```{r}
#Group by genre and select the variables 'genre' and 'length'
film %>% 
  group_by(genre) %>%
  select(genre, length) %>%
  skim()
```

It is evident from the summary table above that the length distribution is not equal among different film genres and therefore the missing film lengths will be handled by adding the median film length by genre to its corresponding missing columns (the mean is not used to avoid outlier influence). The different behaviour between genre and film length was expected, especially because one category is called "Short".

```{r}
#Median length of each genre
film.median <- film %>%
  group_by(genre) %>%
  select(genre, length) %>%
  summarise(median.length = median(length, na.rm=TRUE))
film.median
```

```{r}
#Input corresponding genre median for length missing values 
film <- film %>%
  inner_join(film.median,by=join_by(genre)) %>%
  mutate(had_NAS=ifelse(is.na(length),TRUE,FALSE),length=ifelse(is.na(length),median.length,length)) %>%
  select(-median.length) 
```

## Exploratory Analysis

The last step before fitting the Logistic Regression model is analysing the data set to identify possible patterns.

```{r}
#| echo: true
#| label: fig_1
#| fig-cap: Graphical and numerical summaries of the relationships between pairs of variables
#| fig-width: 8
#| fig-height: 5
#| fig-align: center
film$Rating <- as.factor(film$Rating) 
ggpairs(film[,c(2,3,4,5,9)], aes(colour = Rating, alpha = 0.4), title="Pair plots") 
```

In the plot above we can check the correlation between the different covariates. They all maintain a low correlation coefficient and their scatter plots do not seem to show any linear relationship between them. This means these variables can be included in a logistic regression model without suspecting multicolinearity.

```{r}
#| echo: true
#| label: tbl_1
#| tbl-cap: Summary of counts by genre
#| tbl-width: 8
#| tbl-height: 5
#| tbl-align: center
# To show original counts
film %>% 
  tabyl(genre, Rating) %>% 
  adorn_percentages() %>% 
  adorn_pct_formatting() %>% 
  adorn_ns() 
```

```{r}
#| echo: true
#| label: fig_2
#| fig-cap: Proportion of Movie Ratings by Genre
#| fig-width: 8
#| fig-height: 5
#| fig-align: center

#Proportion of films with rating >7 by genre
ggplot(film, aes(x= Rating,  y = after_stat(prop), group=genre, fill=genre)) + 
    geom_bar(position="dodge", stat="count") +
    labs(y = "Proportion")
```

```{r}
#| echo: true
#| label: fig-boxplot_1
#| fig-cap: Boxplot of Year by Rating
#| fig-width: 8
#| fig-height: 5
#| fig-align: center

#Plot target variable against year covariate 
film %>% ggplot(aes(x=Rating, y=year, colour=Rating)) + 
  geom_boxplot() + 
  theme(legend.position="none") +
  labs(x="Rating", y="Year")
```

```{r}
#| echo: true
#| label: fig-boxplot_2
#| fig-cap: Boxplot of Length by Rating
#| fig-width: 8
#| fig-height: 5
#| fig-align: center

#Plot target variable against length covariate 
film %>% ggplot(aes(x=Rating, y=length, colour=Rating)) + 
  geom_boxplot() + 
  theme(legend.position="none") +
  labs(x="Rating", y="Length")
```

```{r}
#| echo: true
#| label: fig-boxplot_3
#| fig-cap: Boxplot of Budget by Rating
#| fig-width: 8
#| fig-height: 5
#| fig-align: center

#Plot target variable against budget covariate 
film %>% ggplot(aes(x=Rating, y=budget, colour=Rating)) + 
  geom_boxplot() + 
  theme(legend.position="none") +
  labs(x="Rating", y="Budget")
```

```{r}
#| echo: true
#| label: fig-boxplot_4
#| fig-cap: Boxplot of Votes by Rating
#| fig-width: 8
#| fig-height: 5
#| fig-align: center

#Plot target variable against votes covariate 
film %>% ggplot(aes(x=Rating, y=votes, colour=Rating)) + 
  geom_boxplot() + 
  theme(legend.position="none") +
  labs(x="Rating", y="Votes")
```

```{r}
#| echo: true
#| label: fig-barplot_1
#| fig-cap: Barplot of count by genre
#| fig-width: 8
#| fig-height: 5
#| fig-align: center

#Count by genre
film %>% 
  ggplot(aes(x=genre, colour=genre)) +
  geom_bar() +
  theme(legend.position="none") +
  labs(y="Count", x="Film genre")
```

```{r}
#| echo: true
#| label: fig-barplot_2
#| fig-cap: Proportion of films with rating >7 by genre
#| fig-width: 8
#| fig-height: 5
#| fig-align: center

#Proportion of films with rating >7 by genre
film %>% group_by(genre) %>% 
  summarise(prop = mean(target)) %>% 
  arrange() %>% 
  ggplot(aes(x=genre, y=prop, colour=genre)) +
  geom_col() +
  theme(legend.position="none") +
  labs(y="Proportion with rating > 7", x="Film genre")
```

## Model Fitting

```{r}
#Fit a full model with all possible covariates
model1_1 <- glm(target ~ year + length + budget + votes + genre , data = film, 
             family = binomial(link = "logit"))
#The length in 1_1 the NA value in length is replaced by median
model1_1 %>%
  summary()

```

```{r}
#set a dataset without NA
film_without <- read.csv("dataset09.csv") %>% 
  mutate(target = ifelse(rating>7, 1, 0)) %>%  #Define target variable
  mutate(Rating = ifelse(rating>7, ">7", "<=7"))  #Define Rating variable help us get better data visualisation
film_without<- na.omit(film_without)

#The length in 1_2 the NA value in length is removed
model1_2 <- glm(target ~ year + length + budget + votes + genre , data = film_without, 
             family = binomial(link = "logit"))
model1_2 %>%
  summary()
```

```{r}
summ(model1_1)
summ(model1_2)
```

```{r}
mod1_1coefs <- round(coef(model1_1), 3)
mod1_1coefs

confint(model1_1) %>%
  kable()
```

```{r}
mod1_2coefs <- round(coef(model1_2), 3)
mod1_2coefs

confint(model1_2) %>%
  kable()
```

The two treatments of length have slightly different impacts on the film.

```{r}
#Fit without categorical variable:genre, change votes to thousands so the scale is easier to interpret
model2 <- glm(target ~ year +length + budget + votes , data = film %>%
                mutate(votes=votes/1000), family = binomial(link = "logit"))
model2 %>%
  summary()
```

```{r}
summ(model2)
```

```{r}
mod2coefs <- round(coef(model2), 3)
mod2coefs
```

```{r}
confint(model2) %>%
  kable()
```

## Models Comparison

```{r}
#AIC
aic_values <- c(AIC(model1_1), AIC(model1_2), AIC(model2))
models_aic <- data.frame(Model = c("model1_1", "model1_2", "model2"),
                         AIC = aic_values)

print(models_aic)
```

```{r}
pred_prob_model1_1 <- predict(model1_1, newdata = film, type = "response")
y1_1_true <- film$target

pred_prob_model1_2 <- predict(model1_2, newdata = film_without, type = "response")
y1_2_true <- film_without$target

pred_prob_model2 <- predict(model2, newdata = film %>% mutate(votes=votes/1000), type = "response")
y2_true <- film$target
```

```{r}
#| echo: true
#| label: fig_9
#| fig-cap: ROC for Model 1.1
#| fig-width: 8
#| fig-height: 5
#| fig-align: center

#ROC plots
roc_curve <- roc(y1_1_true, pred_prob_model1_1)
plot(roc_curve, main = "ROC Curve for Model1_1", col = "blue")
abline(a = 0, b = 1, lty = 2, col = "red")
auc_value <- round(auc(roc_curve), 2)
legend("bottomright", legend = paste("AUC =", auc_value), col = "blue", lty = 1, bty = "n")

```

```{r}
#| echo: true
#| label: fig_10
#| fig-cap: ROC for Model 1.2
#| fig-width: 8
#| fig-height: 5
#| fig-align: center


roc_curve <- roc(y1_2_true, pred_prob_model1_2)
plot(roc_curve, main = "ROC Curve for Model1_2", col = "blue")
abline(a = 0, b = 1, lty = 2, col = "red")
auc_value <- round(auc(roc_curve), 2)
legend("bottomright", legend = paste("AUC =", auc_value), col = "blue", lty = 1, bty = "n")
```

```{r}

#| echo: true
#| label: fig_11
#| fig-cap: ROC for Model 2
#| fig-width: 8
#| fig-height: 5
#| fig-align: center


roc_curve <- roc(y2_true, pred_prob_model2)
plot(roc_curve, main = "ROC Curve for Model2", col = "blue")
abline(a = 0, b = 1, lty = 2, col = "red")
auc_value <- round(auc(roc_curve), 2)
legend("bottomright", legend = paste("AUC =", auc_value), col = "blue", lty = 1, bty = "n")
```

```{r}
# Compute confusion matrix for each model
y_pred_model1_1 <- factor(ifelse(pred_prob_model1_1 > 0.5, 1, 0), levels = c(0, 1))
y1_1_true <- factor(y1_1_true, levels = c(0, 1))
conf_matrix_model1_1 <- confusionMatrix(y_pred_model1_1, y1_1_true)
print(conf_matrix_model1_1)
```

```{r}
y_pred_model1_2 <- factor(ifelse(pred_prob_model1_2 > 0.5, 1, 0), levels = c(0, 1))
y1_2_true <- factor(y1_2_true, levels = c(0, 1))
conf_matrix_model1_2 <- confusionMatrix(y_pred_model1_2, y1_2_true)
print(conf_matrix_model1_2)
```

```{r}
y_pred_model2 <- factor(ifelse(pred_prob_model2 > 0.5, 1, 0), levels = c(0, 1))
y2_true <- factor(y2_true, levels = c(0, 1))
conf_matrix_model2 <- confusionMatrix(y_pred_model2, y2_true)
print(conf_matrix_model2)
```

```{r}
# Compute precision
precision_model1_1 <- conf_matrix_model1_1$byClass["Precision"]
precision_model1_2 <- conf_matrix_model1_2$byClass["Precision"]
precision_model2 <- conf_matrix_model2$byClass["Precision"]

# Compute recall
recall_model1_1 <- conf_matrix_model1_1$byClass["Recall"]
recall_model1_2 <- conf_matrix_model1_2$byClass["Recall"]
recall_model2 <- conf_matrix_model2$byClass["Recall"]

# Compute accuracy
accuracy_model1_1 <- conf_matrix_model1_1$overall["Accuracy"]
accuracy_model1_2 <- conf_matrix_model1_2$overall["Accuracy"]
accuracy_model2 <- conf_matrix_model2$overall["Accuracy"]

# Create a data frame to store the metrics
metrics <- data.frame(Model = c("Model 1_1", "Model 1_2", "Model 2"),
                      Precision = c(precision_model1_1, precision_model1_2, precision_model2),
                      Recall = c(recall_model1_1, recall_model1_2, recall_model2),
                      Accuracy = c(accuracy_model1_1, accuracy_model1_2, accuracy_model2))

# Print the metrics
print(metrics)
```

## Final model and variable influence

From the different models that were fit we can see that model 1.2 had the best perfomance when it comes to AIC and also classification metrics ( precision, recall and accuracy) so this model will be chosen as the model that describes the influence each covariate has on film rating.

```{r}
summary(model1_2)
```

$$ \log(\frac{p}{1-p}) = \widehat{\beta}_0 + \widehat{\beta}_{1} Year + \widehat{\beta}_{2} Length + \widehat{\beta}_{3} Budget + \widehat{\beta}_4 Votes + \widehat{\beta}_5 \mathbb{I}_{Animation} + \widehat{\beta}_6 \mathbb{I}_{Comedy} + \widehat{\beta}_7 \mathbb{I}_{Documentary} + \widehat{\beta}_8 \mathbb{I}_{Drama} + \widehat{\beta}_9 \mathbb{I}_{Romance} + \widehat{\beta}_{10} \mathbb{I}_{Short}  $$

All covariates were significant except for the animation and short genres, meaning that both of these genres do not have an intercept term which is statistically different to that of the action genre.

```{r}
coef <- as.data.frame(model1_2$coefficients) 
coef <- cbind(Variable = rownames(coef), coef)
rownames(coef) <- 1:nrow(coef)
colnames(coef) <- c('variable', 'estimate')
coef <- coef %>% mutate(estimate = exp(estimate))

coef
```

```{r}
#Compute the odds for the intercept term (genre: Action)

```
